**Отчет о выполнении лабораторной работы**

**1. Структура программы:**
- **Структура `Node`:** Содержит поля:
  - `name` (string),
  - `number` (int),
  - `value` (double),
  - указатель `next` на следующий узел.
- **Класс `LinkedList`:** Инкапсулирует методы для работы со списком:
  - `addToStart` — добавление в начало,
  - `addToEnd` — добавление в конец,
  - `insertAfter` и `insertBefore` — вставка после/до указанного элемента,
  - `deleteNode` — удаление по имени,
  - `displayList` — вывод списка.

**2. Алгоритмы функций:**
- **Добавление в начало/конец:** Создание нового узла и обновление указателей.
- **Вставка после/до:** Поиск целевого узла, корректировка связей между узлами.
- **Удаление:** Поиск узла, обновление связей соседних узлов, освобождение памяти.
- **Вывод списка:** Итеративный обход всех узлов с выводом их данных.

**3. Пример выполнения:**
```
Имя: A, Число: 1, Значение: 1.1
Имя: B, Число: 2, Значение: 2.2
Имя: D, Число: 4, Значение: 4.4
Имя: C, Число: 3, Значение: 3.3
------------------------
Имя: A, Число: 1, Значение: 1.1
Имя: B, Число: 2, Значение: 2.2
Имя: C, Число: 3, Значение: 3.3
------------------------
Имя: A, Число: 1, Значение: 1.1
Имя: E, Число: 5, Значение: 5.5
Имя: B, Число: 2, Значение: 2.2
Имя: C, Число: 3, Значение: 3.3
Имя: F, Число: 6, Значение: 6.6
------------------------
```

**4. Особенности:**
- Обработка случаев пустого списка и отсутствия целевого элемента.
- Динамическое управление памятью (использование `new` и `delete`).
